// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nakisa.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Nakisa.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Nakisa.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryType")
                        .HasColumnType("integer")
                        .HasColumnName("category_type");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Music", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Artist")
                        .HasColumnType("text")
                        .HasColumnName("artist");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_id");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer")
                        .HasColumnName("playlist_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_musics");

                    b.HasIndex("PlaylistId")
                        .HasDatabaseName("ix_musics_playlist_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_musics_user_id");

                    b.ToTable("musics", (string)null);
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("ChannelInviteLink")
                        .HasColumnType("text")
                        .HasColumnName("channel_invite_link");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Emoji")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("emoji");

                    b.Property<string>("GroupInviteLink")
                        .HasColumnType("text")
                        .HasColumnName("group_invite_link");

                    b.Property<bool>("IncludeInMainPage")
                        .HasColumnType("boolean")
                        .HasColumnName("include_in_main_page");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("ProfileImagePath")
                        .HasColumnType("text")
                        .HasColumnName("profile_image_path");

                    b.Property<long>("TelegramChannelId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_channel_id");

                    b.Property<long>("TelegramGroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_group_id");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("pk_playlists");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_playlists_category_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_playlists_parent_id");

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarPath")
                        .HasColumnType("text")
                        .HasColumnName("avatar_path");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<int>("CaptionIdentifier")
                        .HasColumnType("integer")
                        .HasColumnName("caption_identifier");

                    b.Property<int>("ChannelIncluding")
                        .HasColumnType("integer")
                        .HasColumnName("channel_including");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsStaff")
                        .HasColumnType("boolean")
                        .HasColumnName("is_staff");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("PersonChannelLink")
                        .HasColumnType("text")
                        .HasColumnName("person_channel_link");

                    b.Property<long>("Score")
                        .HasColumnType("bigint")
                        .HasColumnName("score");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Music", b =>
                {
                    b.HasOne("Nakisa.Domain.Entities.Playlist", "Playlist")
                        .WithMany("Musics")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musics_playlists_playlist_id");

                    b.HasOne("Nakisa.Domain.Entities.User", "PostedBy")
                        .WithMany("PostedMusics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musics_users_user_id");

                    b.Navigation("Playlist");

                    b.Navigation("PostedBy");
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Playlist", b =>
                {
                    b.HasOne("Nakisa.Domain.Entities.Category", "Category")
                        .WithMany("Playlists")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlists_categories_category_id");

                    b.HasOne("Nakisa.Domain.Entities.Playlist", "Parent")
                        .WithMany("SubPlaylists")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_playlists_playlists_parent_id");

                    b.Navigation("Category");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Category", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.Playlist", b =>
                {
                    b.Navigation("Musics");

                    b.Navigation("SubPlaylists");
                });

            modelBuilder.Entity("Nakisa.Domain.Entities.User", b =>
                {
                    b.Navigation("PostedMusics");
                });
#pragma warning restore 612, 618
        }
    }
}
